---
import { PageType } from "@rxdrag/rxcms-models";
import Layout from "@/layouts/Layout.astro";
import { rx } from "theme";
import { rxPage } from "@rxdrag/website-lib-core";
import { Meta } from "@rxdrag/website-lib";
import Header from "@/components/Header.astro";
import Breadcrumb from "@/components/Breadcrumb.astro";
import PostCard from "@/components/PostCard.astro";
import Pagination from "@/components/Pagination.astro";
import CtaBlock from "@/components/CtaBlock.astro";
import Footer from "@/components/Footer.astro";
import MiniFloat from "@/components/MiniFloat.astro";
import Globals from "@/components/Globals.astro";
// 从 props 获取分页信息和文章数据
const { currentPage, pageSize } = Astro.props;
export async function getStaticPaths() {
  // 获取分页路由列表
  return await rx.getPostListPaths({ pageSize: 10, category: undefined });
}
const posts = await rx.getPosts({
  category: undefined,
  page: currentPage,
  pageSize,
  coverSize: {
    width: 600,
    height: 400,
  },
});
// 创建分页对象
const pagination = rxPage.postsPagination(Astro.props);
const breadcrumbItems = rxPage.postListBreadcrumbs(undefined, "首页", "博客");
const meta = (await rx.getPageByType(PageType.PostList))?.meta;---

<Layout>
  <Meta title="博客" slot="meta" content={meta} />
  <Header />
  <Breadcrumb items={breadcrumbItems} title="博客" />
  <section class="m-h-20 w-full z-10">
    <div class="container">
      <div
        id="blog-posts-list"
        class="mx-auto mt-16 grid grid-cols-1 md:grid-cols-2 gap-8"
      >
        {
          posts?.map((post) => (
            <PostCard post={post} detailTitle="阅读文章" />
          ))
        }
      </div>
      <Pagination pagination={pagination} />
    </div>
  </section>
  <CtaBlock />
  <Footer />
  <MiniFloat />
  <Globals />
</Layout>

<script>
  import { pageLoader } from "@rxdrag/website-lib-core";
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  // 注册 ScrollTrigger 插件
  gsap.registerPlugin(ScrollTrigger);

  function initBlogPostsAnimations() {
    // 获取文章卡片
    const postCards = document.querySelectorAll("#blog-posts-list article");

    if (postCards.length === 0) {
      return;
    }

    // 立即设置初始状态，避免闪烁
    gsap.set(postCards, {
      y: 80,
      opacity: 0,
      scale: 0.95,
      immediateRender: true,
    });

    // 按行分组文章（每行2个）
    const cardsPerRow = 2;
    const rows = [];

    for (let i = 0; i < postCards.length; i += cardsPerRow) {
      const rowCards = Array.from(postCards).slice(i, i + cardsPerRow);
      rows.push(rowCards);
    }

    // 为每一行创建动画
    rows.forEach((rowCards, rowIndex) => {
      if (rowCards.length === 0) return;

      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: rowCards[0],
          start: "top 90%", // 更早触发，避免闪烁
          end: "bottom 10%",
          toggleActions: "play none none reverse",
          markers: false,
        },
      });

      // 为这一行的每个卡片添加动画
      tl.to(
        rowCards,
        {
          y: 0,
          opacity: 1,
          scale: 1,
          duration: 1.2,
          ease: "power3.out",
          stagger: 0.15, // 同一行内的错开时间
        },
        0
      ); // 所有动画同时开始
    });

    // 添加一个全局的容器动画，让整个列表有轻微的入场效果
    const container = document.querySelector("#blog-posts-list");
    if (container) {
      gsap.set(container, {
        opacity: 0,
        y: 20,
        immediateRender: true,
      });

      gsap.to(container, {
        opacity: 1,
        y: 0,
        duration: 0.6,
        ease: "power2.out",
        delay: 0.1, // 减少延迟
      });
    }
  }

  // 立即初始化动画，不等待pageLoader
  initBlogPostsAnimations();

  // 同时保留pageLoader的初始化，以防万一
  pageLoader.onLoaded(() => {
    console.log("文章列表动画初始化");
    setTimeout(() => {
      initBlogPostsAnimations();
    }, 100); // 减少延迟
  });
</script>